// Debug test to understand actual type inference
import { describe, test, expectTypeOf } from "vitest";
import { s } from "../../../../src/schema/index.js";
import type {
  MapFieldInputType,
  IsFieldAutoGenerated,
  GetRequiredCreateFields,
  GetOptionalCreateFields,
  HasFieldDefault,
  IsFieldNullable,
  IsFieldId,
  MapModelCreateFields,
} from "../../../../src/types/foundation/index.js";

describe("Foundation Debug", () => {
  test("Debug auto generation type inference", () => {
    const regularField = s.string();
    const autoField = s.string().uuid();

    type RegularAuto = IsFieldAutoGenerated<typeof regularField>;
    type AutoAuto = IsFieldAutoGenerated<typeof autoField>;

    // Test inputs
    type RegularInput = MapFieldInputType<typeof regularField>;
    type AutoInput = MapFieldInputType<typeof autoField>;

    // Verify our fixes work
    expectTypeOf<RegularAuto>().toEqualTypeOf<false>();
    expectTypeOf<AutoAuto>().toEqualTypeOf<true>();
    expectTypeOf<AutoInput>().toEqualTypeOf<string | undefined>();
  });

  test("Debug required/optional fields - step by step", () => {
    // Create individual fields to test their properties
    const idField = s.string().id();
    const nameField = s.string();
    const emailField = s.string().unique();
    const ageField = s.int().nullable();
    const tagsField = s.string().array();
    const settingsField = s.json().default({});
    const createdAtField = s.dateTime().now();

    // Test individual field properties
    type IdIsNullable = IsFieldNullable<typeof idField>;
    type IdHasDefault = HasFieldDefault<typeof idField>;
    type IdIsAuto = IsFieldAutoGenerated<typeof idField>;
    type IdIsId = IsFieldId<typeof idField>;

    type NameIsNullable = IsFieldNullable<typeof nameField>;
    type NameHasDefault = HasFieldDefault<typeof nameField>;
    type NameIsAuto = IsFieldAutoGenerated<typeof nameField>;

    type SettingsIsNullable = IsFieldNullable<typeof settingsField>;
    type SettingsHasDefault = HasFieldDefault<typeof settingsField>;
    type SettingsIsAuto = IsFieldAutoGenerated<typeof settingsField>;

    type CreatedAtIsNullable = IsFieldNullable<typeof createdAtField>;
    type CreatedAtHasDefault = HasFieldDefault<typeof createdAtField>;
    type CreatedAtIsAuto = IsFieldAutoGenerated<typeof createdAtField>;

    // Verify field analysis
    expectTypeOf<IdIsNullable>().toEqualTypeOf<false>();
    expectTypeOf<IdHasDefault>().toEqualTypeOf<false>();
    expectTypeOf<IdIsAuto>().toEqualTypeOf<false>();
    expectTypeOf<IdIsId>().toEqualTypeOf<true>();

    expectTypeOf<NameIsNullable>().toEqualTypeOf<false>();
    expectTypeOf<NameHasDefault>().toEqualTypeOf<false>();
    expectTypeOf<NameIsAuto>().toEqualTypeOf<false>();

    expectTypeOf<SettingsIsNullable>().toEqualTypeOf<false>();
    expectTypeOf<SettingsHasDefault>().toEqualTypeOf<true>();
    expectTypeOf<SettingsIsAuto>().toEqualTypeOf<false>();

    expectTypeOf<CreatedAtIsNullable>().toEqualTypeOf<false>();
    expectTypeOf<CreatedAtHasDefault>().toEqualTypeOf<false>();
    expectTypeOf<CreatedAtIsAuto>().toEqualTypeOf<true>();

    // Now test the model-level analysis
    const testModel = s.model("Test", {
      id: idField,
      name: nameField,
      email: emailField,
      age: ageField,
      tags: tagsField,
      settings: settingsField,
      createdAt: createdAtField,
    });

    type RequiredFields = GetRequiredCreateFields<typeof testModel>;
    type OptionalFields = GetOptionalCreateFields<typeof testModel>;

    // Based on the logic:
    // - id: ID field (should be optional for create operations)
    // - name: no nullable, no default, no auto -> REQUIRED
    // - email: no nullable, no default, no auto -> REQUIRED
    // - age: nullable -> OPTIONAL
    // - tags: no nullable, no default, no auto -> REQUIRED
    // - settings: has default -> OPTIONAL
    // - createdAt: auto-generated -> OPTIONAL

    // Let's see what we actually get
    console.log("Required should be: name, email, tags");
    console.log("Optional should be: id, age, settings, createdAt");
  });

  test("Debug create fields mapping", () => {
    const userModel = s.model("User", {
      id: s.string().id(),
      name: s.string(),
      age: s.int().nullable(),
      isActive: s.boolean().default(true),
      tags: s.string().array(),
    });

    type RequiredFields = GetRequiredCreateFields<typeof userModel>;
    type OptionalFields = GetOptionalCreateFields<typeof userModel>;
    type CreateFields = MapModelCreateFields<typeof userModel>;

    // Debug: Show actual types
    type TestRequired = RequiredFields; // This should be "name"
    type TestOptional = OptionalFields; // This should be "id" | "age" | "isActive" | "tags"
    type TestCreate = CreateFields; // This is what we're producing

    // Test individual expected vs actual
    expectTypeOf<TestRequired>().toEqualTypeOf<"name">();
    expectTypeOf<TestOptional>().toEqualTypeOf<
      "id" | "age" | "isActive" | "tags"
    >();

    // Test the actual structure - what are we producing?
    // expectTypeOf<TestCreate>().toEqualTypeOf<{
    //   name: string;
    //   id?: string;
    //   age?: number | null;
    //   isActive?: boolean | undefined;
    //   tags?: string[];
    // }>();
  });
});
