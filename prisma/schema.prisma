// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "../generated/prisma"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  metadata  Json?
  tags      String[]
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  followers Follow[]  @relation("following")
  following Follow[]  @relation("followers")
  likes     Like[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
  likes    Like[]
  tags     Tag[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  posts Post[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  follower    User   @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("followers", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}
