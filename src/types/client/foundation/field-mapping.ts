// Foundation Types: Field Mapping
// Bridge between BaseField instances and TypeScript types

import type { BaseField } from "../../../schema/fields/base.js";
import type { Model } from "../../../schema/model.js";
import type {
  FieldState,
  InferType,
  InferInputType,
  InferStorageType,
} from "../../field-states.js";
import type { AutoGenerateType } from "../../scalars.js";
import { FieldUpdateOperations } from "../query/update-input.js";
import type {
  ModelFields,
  FieldNames,
  ModelDefinition,
} from "./model-extraction.js";

// Core type mapping using existing FieldState system
export type MapFieldType<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? InferType<TState> : never;

export type MapFieldInputType<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? InferInputType<TState> : never;

export type MapFieldStorageType<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? InferStorageType<TState> : never;

// Field property analysis using FieldState
export type IsFieldNullable<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? TState["IsNullable"] : never;

export type IsFieldArray<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? TState["IsArray"] : never;

export type IsFieldId<TField extends BaseField<any>> = TField extends BaseField<
  infer TState
>
  ? TState["IsId"]
  : never;

export type IsFieldUnique<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? TState["IsUnique"] : never;

export type HasFieldDefault<TField extends BaseField<any>> =
  TField extends BaseField<infer TState> ? TState["HasDefault"] : never;

export type IsFieldAutoGenerated<TField extends BaseField<any>> =
  TField extends BaseField<infer TState>
    ? TState["AutoGenerate"] extends AutoGenerateType
      ? true
      : false
    : never;

// Model-level field analysis - using conditional types to handle empty models
export type GetUniqueFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldUnique<ModelFields<TModel>[K]> extends true
              ? K
              : IsFieldId<ModelFields<TModel>[K]> extends true
              ? K
              : never
            : never
          : never;
      }[FieldNames<TModel>];

export type GetIdFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldId<ModelFields<TModel>[K]> extends true
              ? K
              : never
            : never
          : never;
      }[FieldNames<TModel>];

export type GetNullableFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldNullable<ModelFields<TModel>[K]> extends true
              ? K
              : never
            : never
          : never;
      }[FieldNames<TModel>];

export type GetArrayFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldArray<ModelFields<TModel>[K]> extends true
              ? K
              : never
            : never
          : never;
      }[FieldNames<TModel>];

// Required vs optional field logic for create operations
export type GetRequiredCreateFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldId<ModelFields<TModel>[K]> extends true
              ? never // ID fields are always optional for create operations
              : IsFieldUnique<ModelFields<TModel>[K]> extends true
              ? never // Unique fields are optional for create operations
              : IsFieldArray<ModelFields<TModel>[K]> extends true
              ? never // Array fields are optional for create operations
              : IsFieldNullable<ModelFields<TModel>[K]> extends true
              ? never
              : HasFieldDefault<ModelFields<TModel>[K]> extends true
              ? never
              : IsFieldAutoGenerated<ModelFields<TModel>[K]> extends true
              ? never
              : K
            : never
          : never;
      }[FieldNames<TModel>];

export type GetOptionalCreateFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? never
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? IsFieldId<ModelFields<TModel>[K]> extends true
              ? K // ID fields are always optional for create operations
              : IsFieldUnique<ModelFields<TModel>[K]> extends true
              ? K // Unique fields are optional for create operations
              : IsFieldArray<ModelFields<TModel>[K]> extends true
              ? K // Array fields are optional for create operations
              : IsFieldNullable<ModelFields<TModel>[K]> extends true
              ? K
              : HasFieldDefault<ModelFields<TModel>[K]> extends true
              ? K
              : IsFieldAutoGenerated<ModelFields<TModel>[K]> extends true
              ? K
              : never
            : never
          : never;
      }[FieldNames<TModel>];

// Create mapped object types for field values
export type MapModelFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? {}
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldType<ModelFields<TModel>[K]>
            : never
          : never;
      };

export type MapModelInputFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? {}
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldInputType<ModelFields<TModel>[K]>
            : never
          : never;
      };

export type MapModelStorageFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? {}
    : {
        [K in FieldNames<TModel>]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldStorageType<ModelFields<TModel>[K]>
            : never
          : never;
      };

// Create input type based on required/optional field logic
export type MapModelCreateFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? {}
    : {
        [K in FieldNames<TModel> as K extends GetRequiredCreateFields<TModel>
          ? K
          : never]: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldInputType<ModelFields<TModel>[K]>
            : never
          : never;
      } & {
        [K in FieldNames<TModel> as K extends GetOptionalCreateFields<TModel>
          ? K
          : never]?: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldInputType<ModelFields<TModel>[K]>
            : never
          : never;
      };

// Create update type (all fields optional)
export type MapModelUpdateFields<TModel extends Model<any>> =
  FieldNames<TModel> extends never
    ? {}
    : {
        [K in FieldNames<TModel>]?: K extends keyof ModelFields<TModel>
          ? ModelFields<TModel>[K] extends BaseField<any>
            ? MapFieldInputType<ModelFields<TModel>[K]>
            : never
          : never;
      };

// Utility to check if a field name exists in model
export type IsValidFieldName<
  TModel extends Model<any>,
  TFieldName extends string
> = TFieldName extends FieldNames<TModel> ? true : false;

// Extract field type by name
export type GetFieldByName<
  TModel extends Model<any>,
  TFieldName extends FieldNames<TModel>
> = TFieldName extends keyof ModelFields<TModel>
  ? ModelFields<TModel>[TFieldName] extends BaseField<any>
    ? ModelFields<TModel>[TFieldName]
    : never
  : never;

// Extract field type by name
export type GetFieldTypeByName<
  TModel extends Model<any>,
  TFieldName extends FieldNames<TModel>
> = TFieldName extends keyof ModelFields<TModel>
  ? ModelFields<TModel>[TFieldName] extends BaseField<any>
    ? MapFieldType<ModelFields<TModel>[TFieldName]>
    : never
  : never;

// Utility to check if model has specific field types
export type HasIdField<TModel extends Model<any>> =
  GetIdFields<TModel> extends never ? false : true;
export type HasUniqueFields<TModel extends Model<any>> =
  GetUniqueFields<TModel> extends never ? false : true;
export type HasNullableFields<TModel extends Model<any>> =
  GetNullableFields<TModel> extends never ? false : true;
export type HasArrayFields<TModel extends Model<any>> =
  GetArrayFields<TModel> extends never ? false : true;
